/*
 * This file is generated by jOOQ.
*/
package com.assignment.fileProcessor.repository.tables;


import com.assignment.fileProcessor.repository.Keys;
import com.assignment.fileProcessor.repository.Medical;
import com.assignment.fileProcessor.repository.tables.records.DocumentReportRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentReport extends TableImpl<DocumentReportRecord> {

    private static final long serialVersionUID = -1226349293;

    /**
     * The reference instance of <code>medical.document_report</code>
     */
    public static final DocumentReport DOCUMENT_REPORT = new DocumentReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentReportRecord> getRecordType() {
        return DocumentReportRecord.class;
    }

    /**
     * The column <code>medical.document_report.report_id</code>.
     */
    public final TableField<DocumentReportRecord, Integer> REPORT_ID = createField("report_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('medical.report_id_seq')", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>medical.document_report.execution_time</code>.
     */
    public final TableField<DocumentReportRecord, Timestamp> EXECUTION_TIME = createField("execution_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>medical.document_report.doctor_id</code>.
     */
    public final TableField<DocumentReportRecord, Integer> DOCTOR_ID = createField("doctor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>medical.document_report.process_execution_time</code>.
     */
    public final TableField<DocumentReportRecord, Timestamp> PROCESS_EXECUTION_TIME = createField("process_execution_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>medical.document_report.error</code>.
     */
    public final TableField<DocumentReportRecord, String> ERROR = createField("error", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>medical.document_report.document_source</code>.
     */
    public final TableField<DocumentReportRecord, Boolean> DOCUMENT_SOURCE = createField("document_source", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>medical.document_report</code> table reference
     */
    public DocumentReport() {
        this("document_report", null);
    }

    /**
     * Create an aliased <code>medical.document_report</code> table reference
     */
    public DocumentReport(String alias) {
        this(alias, DOCUMENT_REPORT);
    }

    private DocumentReport(String alias, Table<DocumentReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentReport(String alias, Table<DocumentReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Medical.MEDICAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocumentReportRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCUMENT_REPORT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocumentReportRecord> getPrimaryKey() {
        return Keys.DOCUMENT_REPORT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocumentReportRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentReportRecord>>asList(Keys.DOCUMENT_REPORT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DocumentReportRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DocumentReportRecord, ?>>asList(Keys.DOCUMENT_REPORT__DOCUMENT_REPORT_DOCTOR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentReport as(String alias) {
        return new DocumentReport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentReport rename(String name) {
        return new DocumentReport(name, null);
    }
}
