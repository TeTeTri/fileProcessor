/*
 * This file is generated by jOOQ.
*/
package com.assignment.fileProcessor.repository.tables;


import com.assignment.fileProcessor.repository.Keys;
import com.assignment.fileProcessor.repository.Medical;
import com.assignment.fileProcessor.repository.tables.records.MedicalRecordRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicalRecord extends TableImpl<MedicalRecordRecord> {

    private static final long serialVersionUID = 1628365341;

    /**
     * The reference instance of <code>medical.medical_record</code>
     */
    public static final MedicalRecord MEDICAL_RECORD = new MedicalRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicalRecordRecord> getRecordType() {
        return MedicalRecordRecord.class;
    }

    /**
     * The column <code>medical.medical_record.record_id</code>.
     */
    public final TableField<MedicalRecordRecord, Integer> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('medical.record_id_seq')", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>medical.medical_record.doctor_id</code>.
     */
    public final TableField<MedicalRecordRecord, Integer> DOCTOR_ID = createField("doctor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>medical.medical_record.patient_id</code>.
     */
    public final TableField<MedicalRecordRecord, Integer> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>medical.medical_record.disease_id</code>.
     */
    public final TableField<MedicalRecordRecord, Integer> DISEASE_ID = createField("disease_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>medical.medical_record</code> table reference
     */
    public MedicalRecord() {
        this("medical_record", null);
    }

    /**
     * Create an aliased <code>medical.medical_record</code> table reference
     */
    public MedicalRecord(String alias) {
        this(alias, MEDICAL_RECORD);
    }

    private MedicalRecord(String alias, Table<MedicalRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicalRecord(String alias, Table<MedicalRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Medical.MEDICAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MedicalRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDICAL_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MedicalRecordRecord> getPrimaryKey() {
        return Keys.MEDICAL_RECORD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MedicalRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicalRecordRecord>>asList(Keys.MEDICAL_RECORD_PKEY, Keys.MEDICAL_RECORD_UNQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MedicalRecordRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MedicalRecordRecord, ?>>asList(Keys.MEDICAL_RECORD__MEDICAL_RECORD_DOCTOR_ID_FKEY, Keys.MEDICAL_RECORD__MEDICAL_RECORD_PATIENT_ID_FKEY, Keys.MEDICAL_RECORD__MEDICAL_RECORD_DISEASE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MedicalRecord as(String alias) {
        return new MedicalRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalRecord rename(String name) {
        return new MedicalRecord(name, null);
    }
}
