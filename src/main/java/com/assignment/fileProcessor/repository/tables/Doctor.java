/*
 * This file is generated by jOOQ.
*/
package com.assignment.fileProcessor.repository.tables;


import com.assignment.fileProcessor.repository.Keys;
import com.assignment.fileProcessor.repository.Medical;
import com.assignment.fileProcessor.repository.tables.records.DoctorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctor extends TableImpl<DoctorRecord> {

    private static final long serialVersionUID = 1040162135;

    /**
     * The reference instance of <code>medical.doctor</code>
     */
    public static final Doctor DOCTOR = new Doctor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorRecord> getRecordType() {
        return DoctorRecord.class;
    }

    /**
     * The column <code>medical.doctor.doctor_id</code>.
     */
    public final TableField<DoctorRecord, Integer> DOCTOR_ID = createField("doctor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>medical.doctor.department_id</code>.
     */
    public final TableField<DoctorRecord, Integer> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>medical.doctor</code> table reference
     */
    public Doctor() {
        this("doctor", null);
    }

    /**
     * Create an aliased <code>medical.doctor</code> table reference
     */
    public Doctor(String alias) {
        this(alias, DOCTOR);
    }

    private Doctor(String alias, Table<DoctorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doctor(String alias, Table<DoctorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Medical.MEDICAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorRecord> getPrimaryKey() {
        return Keys.DOCTOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorRecord>>asList(Keys.DOCTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DoctorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DoctorRecord, ?>>asList(Keys.DOCTOR__DOCTOR_DEPARTMENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doctor as(String alias) {
        return new Doctor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(String name) {
        return new Doctor(name, null);
    }
}
